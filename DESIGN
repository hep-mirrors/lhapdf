LHAPDF6 DESIGN
==============

The core element of the API is the PDF interface, representing a single set member
for several flavours.

Note that the historical/community terminology for levels of "PDF" is rather
vague, leading to frequent confusion. The term "PDF" may, depending on the
speaker, mean any of the following:
 - a single parton density function for one parton flavour;
 - a PDF set member, consisting of a correlated group of parton densities, one for each parton flavour;
 - a set of PDF members, usually reflecting uncertainties encountered in PDF construction.
The second of these, the "member", is the most commonly used PDF object as it
is usual to choose a point in (x,Q2) space and then use the parton density values
for each parton flavour to determine the outcome of a Markovian process step.
  However, the name "member" is not in active usage for this concept. Hence in
this version of LHAPDF we use the term "PDF" to mean a member, and "PDF set" to
mean a collection of these. No explicit term is defined for a single-flavour PDF
but we tentatively reserve the terms 1FPDF and PDF1F (the latter for C/C++ validity)
for this purpose.
  * Review this situation: should we rename LHAPDF::PDF -> LHAPDF::Member?

PDF objects are allocated dynamically (either locally or on the heap). None of the
static memory issues from Fortran LHAPDF. Potential for use of singleton
allocation based on unique data paths.

PDF data to be separated from the framework: new PDFs should not require
addition of new handling code, nor even a new release of LHAPDF.
  * TODO: A data versioning standard will be needed for reproducibility: IDEAS?

Flavours are identified by standard PDG ID codes. A PDF can contain arbitrarily
many flavours.

There is (in the current envisioning) no explicit type specified for a PDF set,
but the class name LHAPDF::PDFSet is reserved for possible future use.
  * TODO: Explicitly add this type to the API to block user attempts to define it?

Allow use of a "return zero" treatment for unsupported flavours, based on
global, set-level, or member-level configuration.

The main PDF type is the "grid" PDF, based on interpolation of rectangular grids
of data points.

Interpolators: bicubic as standard, but with (in general) use of subgrids to
handle discontinuous transitions in Q2 across flavour mass thresholds. Log
interpolation? Named interpolators overrideable in code, but with defaults
specified in the set/member metadata.
  * TODO: allow the interpolator to have access to multiple subgrids such that
    interpolation on a boundary will use the average of both grid interpolations?

There is no current concept of a PDF set enshrined in the LHAPDF6 code design but
the name LHAPDF::PDFSet is reserved for future use.

Data format: each PDF set is defined by a directory (conceivably support could
later be added for zip or tar archives whose *contents* have a directory
structure) containing data files. Each PDF member is stored in a text file with
the name of the set followed by an underscore and a four digit number (including
leading zeros if needed) and the extension .lha, e.g. <setname>/<setname>_0031.lha
  * TODO: better suggestions than .lha?
The head of the file is reserved for member-level metadata in the YAML format:
this section ends with a sequence of three dashes (---) on a line of their own. This
YAML metadata section is mandatory for all PDF formats, but the format following
the "---" divider line may vary. The type of PDF (and hence the data block format)
must be declared via the YAML "Format" flag in the PDF member file or set info file.
(The latter has the path form <setname>/<setname>.info and contains a single YAML
document.)
  Plain text rather than binary files are mandated for ease of creation, human
readability/debuggability, and because standard compression tools are available
for later addition to the LHAPDF system if runtime data file size is a serious
issue. Separate files are used for data reading efficiency if only a few members
of a large set are needed, and all files have names including the set name so that
they retain a clear identity when removed from their containing directory, e.g. if
exchanged as email attachments.

For grid PDFs, the following file content is in a grid format uniform to all PDF
families: subgrids are delimited by more (---) line separators, and within each
subgrid the first two lines are lists of the x and Q2 anchor values respectively
used in that grid. The following lines are the xf values of the PDFs for each
supported flavour, in order. The flavours are specified as set (or member) metadata, and
the xf values are listed in increasing order of PDG ID code (e.g. usually -5..5,
21 or -6..6, 21 for the standard 5 or 6 quark-flavour PDF).
  * TODO: Alternatively, format as "x Q2 f1 f2 f3 f4 ..."?

New PDF formats may be proposed to the LHAPDF maintainers, and will be
considered for standardisation. Acceptance of proposals is not guaranteed, and
modifications may be insisted upon. We do appreciate the effort, but need to
ensure that new standard formats are kept to a maintainably small number, and
that such formats are sufficiently clean and general that they can conceivably
be maintained forever.

Info objects for metadata and configuration handling: cascading from global
settings down to member-level settings for flexibility. Able to be read in YAML
format from any file, stopping parsing at the --- marker: this allows metadata
to be read for many (including all) sets simultaneously without incurring the
memory penalty of having loaded many data grids. Allows automatic documentation
for web, PDF (via LaTeX), etc.
  * TODO: Documentation system
  * TODO: Set-level info should be a singleton so that a change in code applies to all members.
          Singleton storage/identification by abs path rather than set name?

Global config specified via the $prefix/lhapdf.conf file. Settings can be
overridden in the code via a singleton.

Use of Q2 rather than Q internally and in the API: fits with generator
implementation where evolution variables are usually squared, hence avoiding a
call to sqrt, and because squaring is a cheaper operation than sqrt.

Caching: interpolators should be bound to a PDF object (and be unique, i.e. no
singletons) so that they can cache looked-up/interpolated values. The main
use-case for this is flavour caching, where all flavours in a PDF will be needed
at a single (x,Q2) point. Since each flavour grid needs to be separately interpolated,
ALWAYS calculating all flavours would be wasteful, so the best thing to cache is the
indices of the surrounding grid points (including implicit identification of grid
edges) so that the lookup need not be done multiple times as each flavour is defined
on the same (sub)grid.
  * TODO: make sure that the interaction of caching with zeroed PDF value setting works

Search paths: search for set directories, and info and data files in them, based
on a fallback path treatment. The default path list should just be the
<install_prefix>/share/LHAPDF directory. If defined, the colon-separated
LHAPDF_SET_PATH variable will be searched first
  * TODO: Should the env var overwrite the install prefix or prepend?
Prepending/appending or explicit setting of the paths should be possible via the API.
  * TODO: Use the global config system for the path handling?

Extrapolators: extrapolation may be required but is not advised. Essentially a
damage minimisation exercise. Specification via metadata or explicit code cf. interpolators.

alpha_s handling by analytic approximations, numerical solution of the evolution
ODEs (both with use of flavour threshold treatments), or by interpolation of
tabulated datapoints in the set/member metadata. The 1D interpolation will again
support subgrids across flavour thresholds, but expressed as "pure metadata" in
the header for uniformity of treatment and to allow alpha_s calculation without
being specific to the grid format. QCD params related to alpha_s to be specified
in metadata: Lambda_4, Lambda_5, alpha_s_MZ, Nf, FFNS/VFNS, quark masses, QCD order
(as int = nloops?), default alpha_s solver name.
  * MUST specify alpha_s_mz? Lambda optional? Defaults?

Factories: PDF members, interpolators, extrapolators, and alpha_s solvers all
obtainable by name from factories: this allows all configuration of defaults via
data/info files rather than needing set-specific code. The factories are based
on hard-coded names: we do not anticipate a need for truly dynamic "plug-in"
specification of these objects, and such a facility adds significant complication
to the framework. For development of new interpolators, or use of personalised
ones, all helper object binding designed to be handled by factories may also be
explicitly overridden in user code via the polymorphic Interpolator, Extrapolator,
and AlphaS interfaces.

Factory instantiation of PDFs will be the normal approach, since return of a
reference to the PDF base type obviates the need to know whether a set is based
on grid interpolation or something else. This can be determined via set/member
metadata obtained without loading the format-specific data.

LHAGLUE interface support will be provided for Fortran generators which won't
change. LHAPDF5 ID codes will be supported and will continue to be assigned: PDF
loading by these IDs will be possible and used as the back-end for the Fortran
functions.

* TODO: legacy support for the LHAPDF multiset (initpdfsetm, etc.) functions? Demand?

No (initial) support for nuclear PDFs, but the modular design should make "PDF
modifiers" relatively straightforward. We will consider well-formed proposals
for framework extension to improve this functionality, conditional on
design/implementation/maintenance involvement from members of the nuclear PDF
measurement/theory/user community.

Migration and regression testing: continuous validation against Fortran LHAPDF5
will be made using automated scripts. Maximum tolerated deviation: relative
xf = 0.1% or abs xf = 10^-5, whichever is larger (i.e. a > 0.1% deviation will be
tolerated in regions where the PDF's xf value is anyway so small that it is of no
physical importance.
  * TODO: choose better-motivated thresholds!

Index file pdfsets.index. Just two columns: a positive integer "LHAPDF ID" and
the name of the PDF set whose first member starts at that ID. Used for lookup of
PDF set names by LHAPDF ID, to avoid need for code modification to use this
system. In general any ID will be associated with the set whose listed first ID
is effectively the integer <= bin edge containing the arbitrary ID, to avoid
having to list *all* PDF members' ID codes. The LHAPDF ID is the natural
successor of the PDFLIB numbering scheme and will remain backward compatible
with it, i.e. CTEQ6L1 will remain with ID 10042, CT10 with ID 10800, etc.

Flavor: the word is spelt the American way in the code for definiteness and
consistency!  It's just a convention, don't take it personally ;-)

Use of explicit xfxQ and xfxQ2 names.

Fix of the historic CTEQ6L1 "CTEQ6ll" naming typo, with backward compatibility
in LHAGLUE. A replica of the Fortran PDFLIB and LHAPDFv5 function/subroutine
interfaces is provided under the name LHAGLUE. This should behave familiarly for
users of the old code, although the newly native C++ interface is much more
pleasant and powerful. Multi-set methods are provided in the LHAGLUE interface,
with the previous restriction on the number of simultaneously loaded sets
removed. The dynamic memory allocation and deallocation is automatic.

Define to what extent set-level metadata can be set programmatically at runtime.
Current answer = it can't, because set-level info is duplicated between all the
members of that set and doesn't have an independent existence. Which is fine,
but we should be clear about it in the docs. Should we store global set-level
info in future to allow runtime set-level info setting? (Performance penalty?
Probably not as long as the flavors() vector is stored locally on the PDF
object.)

* TODO: Origin/priority of PDF set naming and member numbers: taken from
  filename, the containing directory name (require consistency with the
  filenames?), and/or the metadata system? Suggest NOT allowing a metadata
  source for naming and member IDs, since it would just lead to maximal
  confusion if they got out of sync with the file/dir names. What if the dir and
  file names are in contradiction? Answer: throw an exception or fail with an
  assert rather than try to be "softer".


Future prospects: new interpolators (e.g. interpolation in log space or separate
x,Q2 interpolator functions), addition of DGLAP or other numerically evolved PDF
types based on e.g. Hoppet (these are not included by default as there has been
a strong trend of PDFs toward purely interpolated grids during the lifetime of
LHAPDF5.)

Nuclear PDFs are not supported in LHAPDFv6.0. We hope that the new C++ interface
will make the writing of nuclear PDF wrapper classes easy, but do not personally
have the experience to do so optimally. Nuclear physicists interested in addition
of nuclear PDF capabilities are encouraged to get in touch with the LHAPDF
developers to discuss requirements, and concrete proposals are particularly encouraged.
