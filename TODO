/**
@page todolist Project to-do list


LHAPDF6 TODO list
=================


VERSION 6.0.5
-------------

- **Add AlphaS mappings to Cython (SL, AB)**

  And alphasQ(q) etc. to PDF, plus 2-arg versions of xfxQ(x, q) etc.

- **Translate C++ exceptions into Python exceptions**

   Should be happening automatically -- Cython bug? There is a real, definite
   Cython bug re. exception declarations on functions that return references,
   so the exception declarations on getPDFSet() etc. are commented for now.


VALIDATION / MIGRATION
----------------------

- **Put all (central) validation plot PDFs on Web (AB)**

   Decrease the threshold a bit and run over all central PDFs.

- **CTEQ PDF approval (AB)**

   Pavel Nadolsky and Jon Pumplin contacted.

- **NNPDF2.3 MC and FFN and QED PDF validation (AB, NNPDF)**

   Juan, Stefano, Maria are checking the MC and FFN sets and will submit the new
   QED sets (NLO and LO).

- **ATLAS PDFs (AB, ATLAS)**

   Sasha, Voica, Mark to provide and approve: contacted.

- **MRST PDF validation (AB,GW)**

   2004QED, LO* and LO**

   Approval needed by Robert et al: contacted.

- **MSTW2008 PDF validation (AB)**

   Approval needed by Graeme, Robert et al: contacted.

- **HERAPDF validation (SL,AB)**

   Mandy (and others) contacted for approval.


WRITE PAPER
-----------

- ** Target at EPJC Tools or CPC?**

   Can put on arXiv before October, but delay publication submission to aim
   (hope) for for eligibility in *next* UK REF.

- **Note fixed problems**

   Support for different set sizes. alpha_s etc. in multi-set mode. Lambda
   reporting to PYTHIA. Number of members reported correctly. **ADD MORE AS WE REMEMBER THEM**



VERSION 6.1
-----------

- **Respond to Mark Sutton's suggestions re. the PDF base class (AB)**

   I'd like to avoid an extra layer of inheritance: maybe we should just move
   some current functions from PDF -> GridPDF if they are really inappropriate.
   And is it really LHAPDF's responsibility to define a base class suitable for
   ~all PDF applications?  If we do modify the API, it would be good to plan for
   photon and nuclear PDF effects on the API in the same interface iteration, if
   possible. Discuss at the Glasgow dev workshop.

- **Add a configure switch to disable the C++ compatibility functions separately (AB)**

   The Fortran interface can't/won't be upgraded, but the C++ one can.

- **Add command-line PDF query/download/upgrade command (David Hall)**

   Discuss/prototype at the Glasgow dev workshop.

- **Karl's concerns about alpha_s NF and low-Q xpol (KN, AB)**

   Discuss at the Glasgow dev workshop.

- **PDF flavor aliasing mechanism**

   e.g. allow anti-flavours to be identical without duplicating their grids in
   the data files or memory. How could we implement this?

- **Expose LHAGLUE slots system for C++ use**

   Automatic memory management can be nice for everyone.

- **Improved PDF extrapolator**

   Keep extrapolating linearly outside the range (in log space)? Graeme suggests
   a particular form of extrapolation at low-Q established from the anomalous
   dimension of the function within the grid at that point. Freezing the value
   may be more appropriate at high-Q. High-x should not require extrapolation,
   but gradient extrapolation in log space may be a good option at low-x.

- **Provide a nicer Fortran interface?**

   Surely something nicer than the LHAPDF5 API can be made? Fortran isn't going
   away from the the theory world.

- **Improved x -> 1 evolution (GW,...)**

   Graeme, etc.: x -> 1 extrapolation should be done carefully to ensure that
   all PDFs -> 0 at x = 1.0, (usually) without going negative. This probably
   deserves specialisation beyond generic splines. Graeme will look at what's
   done in the CTEQ code (other than interpolating in x**0.3)

- **Read PDF sets from tar/zip files**

   This would require some sort of virtual filesystem access to the tarball contents.
   https://code.google.com/p/fuse-zip/ or http://sourceforge.net/projects/avf/? FUSE?
   Most VFSes seem more designed for CLI use than programmatic ZIP access. Maybe
   start with a question on StackOverflow to work out the options.

- **Add helper functions for calculating PDF errors on observables**

   Certainly a good thing to provide an example for... maybe it should just be
   provided as an example? One nice thing is that since we now store a clear
   ErrorType metadata entry for each PDF set, working out the appropriate error
   treatment should be easy (I think it's best to not use words like
   "infallible"!)



AS AND WHEN
-----------

- **Allow use of valence/sea etc. decompositions**

   GridPDF may be inherited from to allow the returned values to be built from
   separate interpolations of component PDFs such as interpolated valence, sea,
   or difference PDFs that are combined to make the physical ones. The PDG ID
   code range for "generator specific" applications may be used, but we'll need
   to bear in mind that this will mean that the flavor ID list has different
   meanings and contents for internal and external purposes: maybe the
   "internal" PDG ID list needs to become part of the grid data header, or can
   the metadata be used?

- **Optimize the grid PDF interpolator code a bit more**

   Cache log(x), log(Q) between samplings -> log() still accounts for 15% of
   CPU: can reduce by factor of 13 in some use cases (only one call for a whole
   flavour interpolation set at the same point). Below threshold? Sherpa already
   report performance increases due to being able to interpolated one flavour at
   a time, so perhaps this use case is not valid in all generators and could be
   a more complexity than it is worth.

- **More aggressive memory and CPU optimisation**

   For example avoiding duplication of x,Q knot arrays between flavors... if
   this "1D" effect is really significant.

- **Support photon structure functions**

   Need to make use of the P2 and IP2 params. No idea how to even start here...

- **Support nuclear corrections**

   Have to be applyable to all nucleon PDFs, regardless of implementation:
   probably nuclear PDFs will inherit from PDF (since they are PDFs) and
   _contain_ a nucleon PDF whose values will be modified before returning.

- **Using std::/boost::function to generically modify the interpolation measures in x, Q (AB)**

- **Use Autoconf's more robust FC_* Fortran function name macros?**

   This would require testing for a Fortran compiler, which we would rather not
   do... Test for a Fortran compiler unless told not to build LHAGLUE? **These
   things arguably cause as many problems as they solve!**

- **Separate the x and Q2 inter/extrapolation?**

   Allow mix & match combinations. Would this simplify the code since the
   1D interpolation methods are very simple and the 2D is built from them?

- **Make GridPDFs not read their info or data blocks until an xf value is requested?!**

   Super-laziness! But is there a real gain other than ~1 sec initialization speed?

- **Speed up interpolation with (opportunistic) GPU and/or threaded interpolation**

   Interpolation of PDFs seems like an ideal use case for PDFs, since it's
   normal to query for all partons in the set at once: if we can load the
   relevant ipol anchors for all flavours onto the GPU then we can maybe get a
   substantial speedup (with Amdahl's Law as the obvious caveat). Good student
   project...

- **Use HDF5 for the data access?**

   David has more info: I've only ever looked at it in a very rudimentary way,
   e.g. playing with PyTables. Sounds good in principle: I prefer a *real world*
   standard to ROOT, anyway ;-) Does it have any string/typed annotation
   mechanism that we could use?

- **Updated Octave wrapper**

   To come from Phil Ilten

*/
