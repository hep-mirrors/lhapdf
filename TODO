/**
@page todolist Project to-do list


LHAPDF6 TODO list
=================

NOW / FOR BETA 1
----------------

- **Migrate CTEQ6L1 and CT10 PDFs to new format and validate (SL,MR,DM,AB,BP,GW)**

   The migration/creategrid script should work. pdfsets.index will need to be
   populated for each set. Metadata will need to be set manually.

   Martin & Steve: make new "heat map" plots for logx+logQ interpolation and
   log-sampling of comparison points.

   Martin, Steve, Andy, Graeme: Probably creategrid will need to be adapted to
   add some more anchor point density in the high-x region: > 0.5, > 0.8, etc.?

   Graeme, etc.: x -> 1 extrapolation should be done carefully to ensure that
   all PDFs -> 0 at x = 1.0, (usually) without going negative. This probably
   deserves specialisation beyond generic splines. Graeme will look at what's
   done in the CTEQ code (other than interpolating in x**0.3!)

- **Fortran compatibility functions (JF,KN,BP,AB)**

   James & Karl: test with PYTHIA6 and Herwig++, and test the ported CT10 with
   Pythias 8 & 6 and James' existing MC validation code.

   Andy: add the non-*m LHAPDF5 Fortran subroutines. Should just use nset = 1
   all the time, I think.

   Also need to add PDFLIB-style xfx etc. functions -- probably necessary for PY6.
   getnset_ and getnmem_ also need to be provided.

- **Improve build robustness, test on Macs and SL5/6/lxplus (AB + testers)**

   Boost detection already improved. Boost version compatibility to be tweaked
   in the code. Bootstrap script and pre-installed version to be provided.

- **Add extra flavors line to grid format (AB)**

   Anticipating demand for use of composite PDF parameterisations in future.

- **Improve the DESIGN document's coherence (AB)**


FOR BETA 2
----------

- **Add interpolation-from-metadata implementation of AlphaS**

   Specify with AlphaS_Q2s, and AlphaS_Vals metadata arrays. Hope we can use doubled Q2
   values robustly to implement 1D subgrids.

- **Re-introduce set-level Info singletons**

   Will allow set-level config changes to propagate to all members of the set.
   Need to define the "lock time", for things like ipol/xpol/alphaS.

- **Fix and test ODE and analytic alpha_s running (KN,SL,MR,GW)**

   The ODE solver needs serious optimisation, and numerically the results look
   dubious for both the analytic and ODE versions. Compare to HOPPET/QCD-PEGASUS
   evolution... looks like we can't borrow their ODE code without introducing a
   Fortran dependency, which we'd rather avoid. Maybe start with conversion to
   C++ of this: https://mstwpdf.hepforge.org/code/alphaS.f

- **Profile GridPDF and AlphaS_ODE**

- **Provide setAlphaS methods cf. setInterpolator (AB)**

   The setAlphaS method should set the params appropriate for the PDF it's being
   attached to.

- **Treating missing flavours with error vs. return 0 (AB)**

   Provide a switch to distinguish the two responses. Put ID check into
   PDF::xfxQ2 function?

- **Forbid PDF construction from a direct path to the data file? (AB)**

   Rely on dir structure instead? Do PDFs _need_ to have a dir? (Maybe yes.)
   Same set of constructors for PDF (and derivatives) and Info?
   Throw/assert if dir name and file name are inconsistent

- **AlphaS default params**

   Should the param defaults be clearly invalid so that default AlphaS fields and
   throw an AlphaSException if the values are not in a physical range?

- **Updated lhapdf-getdata, downloading PDFs as tarballs**

- **Printing out banner info... needed by code that greps for it :-/**

   e.g. ATLAS' Generate_trf.py. Provide a helper function? It shouldn't be
   fundamentally built-in that we have to maintain the old banner style!

- **Metadata standards for accessing special member numbers.**

   e.g. a PosDefMemberID metadata key at set level.


FOR STABLE 6.0.0 RELEASE
------------------------

- **Write-up**

   Target at EPJC Tools, cf. Rivet?

- **Versioning scheme for PDF data**

   In metadata and tarball filenames.

- **Provide a way to find the number of members in a PDF set**

   Or just iterate over ints until an Exception is thrown? We should be able to
   find out not just how many members are available but which numbers, so that
   they do not have to be consecutive (modulo the restriction from the LHAPDF ID
   indexing ranges). Determine by counting member data files in the PDF set
   directory (remember that the info file may not be present).


AS AND WHEN
-----------

- **Add more metadata methods to PDF and PDFGrid as needed**

- **Allow use of valence/sea etc. decompostions**

   GridPDF may be inherited from to allow the returned values to be built from
   separate interpolations of component PDFs such as interpolated valence, sea,
   or difference PDFs that are combined to make the physical ones. The PDG ID
   code range for "generator specific" applications may be used, but we'll need
   to bear in mind that this will mean that the flavor ID list has different
   meanings and contents for internal and external purposes: maybe the
   "internal" PDG ID list needs to become part of the grid data header, or can
   the metadata be used?

- **Make GridPDFs not read their data block until an xf value is requested?!**

   Super-laziness!

- **More aggressive memory and CPU optimisation**

   For example avoiding duplication of x,Q knot arrays between flavors... if
   this "1D" effect is really significant.

- **Read zipped/tarred PDFs**

   With standard directory structure internally.

- **Speed up interpolation with (optional) GPU-based interpolation**

   Interpolation of PDFs seems like an ideal use case for PDFs, since it's
   normal to query for all partons in the set at once: if we can load the
   relevant ipol anchors for all flavours onto the GPU then we can maybe get a
   substantial speedup (with Amdahl's Law as the obvious caveat). Good student
   project...

- **Use HDF5 for the data access?**

   David has more info: I've only ever looked at it in a very rudimentary way,
   e.g. playing with PyTables. Sounds good in principle: I prefer a *real world*
   standard to ROOT, anyway ;-) Does it have any string/typed annotation
   mechanism that we could use?

- **Separate the x and Q2 inter/extrapolation?**

   Allow mix & match combinations. Would this simplify the code since the
   1D interpolation methods are very simple and the 2D is built from them?

- **Updated Octave wrapper**

   To come from Phil Ilten

- **Use Autoconf's more robust FC_* Fortran function name macros**

   This would require testing for a Fortran compiler, which we would rather
   not do... but so do tests for Fortran array pointer handling, etc. Test for
   the Fortran compiler unless told not to build LHAGLUE?

- **Add helper functions for calculating PDF errors on observables**

   Certainly a good thing to provide an example for... maybe it should just be
   provided as an example? One nice thing is that since we now store a clear
   ErrorType metadata entry for each PDF set, working out the appropriate error
   treatment should be easy (I think it's best to not use words like
   "infallible"!)

- **Support the new yaml-cpp API... *and* the old one?**

   Or get rid of `yaml-cpp`? We don't want it to be a source of problems, but
   best not to reinvent an existing wheel unless forced to do so...

*/
