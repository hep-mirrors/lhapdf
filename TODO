/**
@page todolist Project to-do list


LHAPDF6 TODO list
=================


VERSION 6.1.0
-------------

- **Make LHAPDF6 the main LHAPDF web page (AB)**

   Archive the LHAPDF5 pages. Generate set list/details page from Python API /
   pdfsets.index file.

- **Split sampleFromHessian function to be a standalone function (GW, AB)**

   e.g. in a new Tools.h?


WRITE PAPER
-----------

- ** Target at EPJC Tools**

- **Note fixed problems**

   Support for different set sizes. alpha_s etc. in multi-set mode. Lambda
   reporting to PYTHIA. Number of members reported correctly. **ADD MORE AS WE REMEMBER THEM**


VALIDATION / MIGRATION / ETC.
-----------------------------

- **ABM, NNPDF PdfType correction (AB)**

   Some issue reported by GW...

- **ATLAS & HERA PDFs (AB)**

   Waiting for final approvals from Voica.

- **ABM PDF approval**

   Sergey contacted again, hope for approval soon.

- **GJR/JR 08,09 PDFs?**

   Demand for these?



VERSION 6.1.x
-------------

- **AlphaS flavour threshold/mass treatment (AB/KN)**

   Separate AlphaS_QThresholdB etc. from M<qname> (requested by Alex Mitov)

   Add optional vector arg for flavour thresholds on ODe solver: if empty, use
   quark masses as thresholds. Also on analytic solver or is that pointless?

- **Use alpha_s ipol subgrids on thresholds when building an ipol from the ODE solver (KN)**

   Add ODE behaviour to not calculate div-by-zero if x_n+1 = x_n, then insert
   doubled evolution/ipol points on flavour thresholds.

- **Add/move the cteq6ll aliasing to mkPDF/mkPDFs/getPDFSet functions?**

   For backward compatibility. Drop this aliasing with version 6.1, when people
   will have had time to adapt? Or 6.2, along with LHAPDF5 C++ functions?

- **Expose LHAGLUE slots system for C++ use**

   Automatic memory management can be nice for everyone. Expose as PDFManager.

- **Add AlphaS mappings to Cython (SL, AB)**

   And alphasQ(q) etc. to PDF, plus 2-arg versions of xfxQ(x, q) etc.

- **Add debug verbosity about places being searched for PDF files**

- **Translate C++ exceptions into Python exceptions**

   Should be happening automatically -- Cython bug? There is a real, definite
   Cython bug re. exception declarations on functions that return references,
   so the exception declarations on getPDFSet() etc. are commented for now.

- **Reweighting helper functions?**

   e.g. getWeight(PDF*, PDF*, Q, x1, x2=-1). Too trivial, or helpful?


VERSION 6.2
-----------

- **Optimize the grid PDF interpolator code**

   Cache log(x), log(Q) between samplings -> log() still accounts for 15% of
   CPU: can reduce by factor of 13 in some use cases (only one call for a whole
   flavour interpolation set at the same point). Below threshold? Sherpa already
   report performance increases due to being able to interpolated one flavour at
   a time, so perhaps this use case is not valid in all generators and could be
   a more complexity than it is worth.

- **Speed up interpolation (MR)**

   Many studies already... and Martin has done the important work to de-Boostify
   the interpolation grid data objects.

   Report of 6.0.4 slowness relative to LHAPDF5 (on CT10). Weird, we tested this
   at version 6.0.0 and it was outperforming LHA5. Maybe it is slower for CT10
   and ~same for CT10nlo. Juan reports that the NNPDF functions are faster.

   Possible speed-ups: caching the last log(x) and log(Q2) values, caching grid
   index lookup, caching interpolation weights, using a
   native array implementation in place of Boost::multiarray, doing a faster
   hybrid search in the grids, GCC builtins for SSE auto-vectorisation.

   Martin has got some speed-up out of a native array implementation, and found
   no benefit of changing the index search. Andy will look into caching.

- **Remove remaining Boost dependencies / move to C++11 (AB)**

   Boost was being more trouble than it was worth, but maybe now that we're not
   using the filesystem stuff it is ok. Full removal would require several changes:
   - multiarray: replace with Martin's array/SSE code
   - foreach: iterators or require C++11
   - lexical_cast: stringstream wrappers to_str, from_str (and C++11)
   - shared_ptr: manual deletes or require C++11
   - bind: C++11 or something less cool
   Actually this would be rather good, but requires C++11 which is not an option
   just yet.

- **Provide a nicer Fortran interface?**

   Surely something nicer than the LHAPDF5 API can be made? Fortran isn't going
   away from the the theory world. Suggest prefixing all functions with "lhapdf"
   and basing it on the PDFManager, with explicit commands for switching current PDF.


AS AND WHEN
-----------

- **Improved high-x interpolation (??)**

   Sergey Alekhin mentioned that their native treatment of the high-x region is
   rather careful, interpolating in a log(1-x) rather than log(x) space. I'm not
   sure how a smooth handover between the two measures is done: a smooth
   interpolation between modes? Perhaps we could / should implement something
   similar for this region. High-x is definitely an awkward case, given that the
   PDFs vary rapidly in that region and a log measure is maybe not best suited
   to accurately interpolating there... but dense gridding seems to be
   sufficient so far.

   Graeme, etc.: x -> 1 extrapolation should be done carefully to ensure that
   all PDFs -> 0 at x = 1.0, (usually) without going negative. This probably
   deserves specialisation beyond generic splines. Graeme will look at what's
   done in the CTEQ code (other than interpolating in x**0.3)

- **Handle zipped PDF .dat files (AB)**

   Prefer zipped single member data files rather than virtual filesystem access
   to the tarball. Can transparently read zipped files with LD_PRELOAD and
   zlibc: is that enough? Add instructions for that to manual/website.

- **PDF flavor aliasing mechanism**

   e.g. allow anti-flavours to be identical without duplicating their grids in
   the data files or memory. How could we implement this?

- **Speed up interpolation with GPUs**

   Interpolation of PDFs seems like an potential use case for GPUs, since it's
   normal to query for all partons in the set at once: if we can load the
   relevant ipol anchors for all flavours onto the GPU then we can maybe get a
   substantial speedup. OpenMP did not particuarly help, from quick tests.

- **Improved PDF extrapolator**

   Keep extrapolating linearly outside the range (in log space)? Graeme suggests
   a particular form of extrapolation at low-Q established from the anomalous
   dimension of the function within the grid at that point. Freezing the value
   may be more appropriate at high-Q. High-x should not require extrapolation,
   but gradient extrapolation in log space may be a good option at low-x.

- **Allow use of valence/sea etc. decompositions**

   GridPDF may be inherited from to allow the returned values to be built from
   separate interpolations of component PDFs such as interpolated valence, sea,
   or difference PDFs that are combined to make the physical ones. The PDG ID
   code range for "generator specific" applications may be used, but we'll need
   to bear in mind that this will mean that the flavor ID list has different
   meanings and contents for internal and external purposes: maybe the
   "internal" PDG ID list needs to become part of the grid data header, or can
   the metadata be used?

- **Using std::/boost::function to generically modify the interpolation measures in x, Q (AB)**

- **Use Autoconf's more robust FC_* Fortran function name macros?**

   This would require testing for a Fortran compiler, which we would rather not
   do... Test for a Fortran compiler unless told not to build LHAGLUE? **These
   things arguably cause as many problems as they solve!**

- **Separate the x and Q2 inter/extrapolation?**

   Allow mix & match combinations. Would this simplify the code since the
   1D interpolation methods are very simple and the 2D is built from them?

- **Make GridPDFs not read their info or data blocks until an xf value is requested?!**

   Super-laziness! But is there a real gain other than ~1 sec initialization speed?

- **Updated Octave wrapper**

   To come from Phil Ilten if he's interested.

*/
