#! /usr/bin/env python

"""\
Usage: %prog <setname> [<setname2> ...]

The set names given are in the format required for initialisation in LHAPDF5, e.g.

  MSTW2008lo90cl_nf3.LHgrid, MSTW2008lo90cl.LHgrid, NNPDF23_nlo_as_0119.LHgrid,
  CT10.LHgrid, cteq66.LHgrid, cteq6ll.LHpdf, cteq6ll.LHgrid, ...

It's also possible to rename sets from the HAPDF5 name to a new LHAPDF6 name, e.g.

  cteq6ll.LHpdf:CTEQ6L1 or cteq6ll.LHgrid:CTEQ6L1
"""

import lhapdf, numpy
import os, sys, optparse

## Parse the command line to get the set names for migration (in LHAPDF5 format)
p = optparse.OptionParser(usage=__doc__)
p.add_option("--extraxs", dest="EXTRAXS", metavar="X1,X2,...", help="comma-separated list of extra sample knots in x", default=None)
p.add_option("--extraqs", dest="EXTRAQS", metavar="Q1,Q2,...", help="comma-separated list of extra sample knots in Q", default=None)
opts, args = p.parse_args()


## For every PDF set
for lha5name in args:

    ## Given names can be in the format lhapdf5name:lhapdf6name for easy set renaming
    if ":" in lha5name:
        setname = lha5name.split(":")[1]
        lha5name = lha5name.split(":")[0]
    else:
        setname = os.path.splitext(lha5name)[0]
    print "Migrating %s -> %s" % (lha5name, setname)

    ## Create output dir if needed
    if not os.path.exists(setname):
        os.mkdir(setname)

    ## Initialize LHAPDF for this set
    lhapdf.initPDFSetByName(lha5name)
    # TODO: Get alpha_s anchors here (for grid Qs?) to write into set metadata

    ## Create meta file for set
    metapath = os.path.join(setname, setname + '.info')
    f = open(metapath, "w")
    f.write("SetDesc: \n")
    f.write("NumMembers: %d\n" % lhapdf.numberPDF())
    f.write("Flavors: [-5,-4,-3,-2,-1,1,2,3,4,5,21]\n")
    f.write("OrderQCD: \n")
    f.write("ErrorType: \n")
    f.write("AlphaS_MZ: \n")
    f.write("AlpaS_OrderQCD: \n")
    f.write("Lambda4: \n")
    f.write("Lambda5: \n")
    f.close()

    ## Iterate over each member in the set
    for member in xrange(lhapdf.numberPDF()):
        lhapdf.initPDF(member)

        ## Get the x and Q anchor point arrays
        try:
            ## Use LHAPDF5 to get the exact x and q2 grid points (requires LHAPDF 5.9)
            import ctypes
            try:
                _lha = ctypes.CDLL('libLHAPDF.so')
            except:
                _lha = ctypes.CDLL('libLHAPDF.dylib')
            nxgrid = ctypes.c_uint()
            nqgrid = ctypes.c_uint()
            gridx = (ctypes.c_double * 500)()
            gridq = (ctypes.c_double * 500)()
            _lha.getgrid_(ctypes.byref(nxgrid), ctypes.byref(nqgrid), gridx, gridq)
            xs, q2s = gridx[:nxgrid.value], gridq[:nqgrid.value]
            ## Remove x == 0 points: they screw up the ipol/xpol separation
            if xs[0] == 0.0:
                del xs[0]
        except Exception, e:
            xs = list(numpy.logspace(-8, -0.5, 30)) + list(numpy.linspace(0.5, 1.0, 6))
            q2s = list(numpy.logspace(0.1, 8, 50))
        qs = list(numpy.sqrt(numpy.array(q2s)))

        ## Fill in extra sampling points if manually specified
        if opts.EXTRAXS:
            extraxs = [float(x) for x in opts.EXTRAXS.split(",")]
            xs = sorted(xs + extraxs)
        if opts.EXTRAQS:
            extraqs = [float(q) for q in opts.EXTRAQS.split(",")]
            qs = sorted(qs + extraqs)

        ## If there isn't an x = 1 point, create one
        # TODO: Remove this when LHAPDF ipol knows about x=1?
        # if xs[-1] != 1.0:
        #     xs.append(1.0)

        ## Determine the active (non-zero) flavours in the grid (will be -5..5 or -6..6)
        # def active_flavours(xfxs):
        #     pids = [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]
        #     xfxs_array = numpy.array(xfxs)
        #     pids = [pid for i, pid in enumerate(pids) if xfxs_array[:,i].any()]
        #     return pids
        ## NB. 0 is listed last since it will be translated to 21 in the PDG scheme
        lhapids = [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 0]

        ## Get the xf values for this PDF member
        xfs = []
        for x in xs:
            for q in qs:
                # if x != 1.0:
                #     xfs.append([lhapdf.xfx(x, q, pid) for pid in lhapids])
                # else:
                #     ## Force xf(x=1) = 0 for now, until ipol is improved
                #     # TODO: Remove this when LHAPDF ipol knows about x=1
                #     xfs.append([0.0 for pid in lhapids])
                xfs.append([lhapdf.xfx(x, q, pid) for pid in lhapids])

        ## Work out the member file path and open it for writing
        memname = setname + ('_%04d.lha' % member)
        mempath = os.path.join(setname, memname)
        f = open(mempath, "w")
        #f.write("PdfDesc: \n")
        f.write("PdfType: %s\n" % ("central" if member == 0 else "error"))
        f.write("Format: lhagrid1\n")
        f.write("---\n")
        ## Write x points
        line = " ".join("%2.6e" % x for x in xs)
        f.write(line + "\n")
        ## Write Q2 points
        line = " ".join("%2.6e" % q2 for q2 in q2s)
        f.write(line + "\n")
        ## Write internal flavour list
        f.write("-5 -4 -3 -2 -1 1 2 3 4 5 21" + "\n")
        ## Write block of xf values
        for xfs_xq in xfs:
            line = ""
            for xf in xfs_xq:
                if xf == 0.0: xf = 0.0 # remove occurences of negative zero
                line += "%2.6e " % xf
            f.write(line.strip() + "\n")

        f.write("---\n")
        f.close()
