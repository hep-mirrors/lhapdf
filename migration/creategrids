#! /usr/bin/env python

"""\
Usage: %prog <setname> [<setname2> ...]

The set names given are in the format required for initialisation in LHAPDF5, e.g.

  MSTW2008lo90cl_nf3.LHgrid, MSTW2008lo90cl.LHgrid, NNPDF23_nlo_as_0119.LHgrid,
  CT10.LHgrid, cteq66.LHgrid, cteq6ll.LHpdf, cteq6ll.LHgrid, ...

It's also possible to rename sets from the LHAPDF5 name to a new LHAPDF6 name, e.g.

  cteq6ll.LHpdf:CTEQ6L1 or cteq6ll.LHgrid:CTEQ6L1


TODO:
  * Force PDF behaviour toward x = 1... and Q = 0?
"""

import lhapdf, numpy, math
import os, sys, optparse

## Parse the command line to get the set names for migration (in LHAPDF5 format)
p = optparse.OptionParser(usage=__doc__)
p.add_option("--extraxs", dest="EXTRAXS", metavar="X1,X2,...", help="comma-separated list of extra sample knots in x", default=None)
p.add_option("--extraqs", dest="EXTRAQS", metavar="Q1,Q2,...", help="comma-separated list of extra sample knots in Q", default=None)
p.add_option("--resample", dest="RESAMPLE", action="store_true", help="override the original sample grid with a new one", default=False)
opts, args = p.parse_args()

## Standard Z mass in GeV
MZ = 91.1876

## For every PDF set
for lha5name in args:

    ## Given names can be in the format lhapdf5name:lhapdf6name for easy set renaming
    if ":" in lha5name:
        setname = lha5name.split(":")[1]
        lha5name = lha5name.split(":")[0]
    else:
        setname = os.path.splitext(lha5name)[0]
    print "Migrating %s -> %s" % (lha5name, setname)

    ## Create output dir if needed
    if not os.path.exists(setname):
        os.mkdir(setname)

    ## Initialize LHAPDF for this set
    lhapdf.initPDFSetByName(lha5name)

    ## Get the number of members in the PDF
    numMembers = lhapdf.numberPDF() + 1
    if lhapdf.numberPDF() == 1:
       numMembers -= 1

    ## This will be filled with the set's Q2 anchors for alpha_s ipol
    alphas_qs = None

    ## Iterate over each member in the set (central is not included)
    for member in xrange(numMembers):
        lhapdf.initPDF(member)

        ## Get the x and Q anchor point arrays
        try:
            if opts.RESAMPLE:
                print "Overriding original grid with a new log-lin x sampling and log Q2 sampling"
                raise Exception("Exception to make sure we manually construct the sample grid")
            ## Use LHAPDF5 to get the exact x and q2 grid points (requires LHAPDF 5.9)
            import ctypes
            try:
                _lha = ctypes.CDLL('libLHAPDF.so')
            except:
                _lha = ctypes.CDLL('libLHAPDF.dylib')
            nxgrid = ctypes.c_uint()
            nqgrid = ctypes.c_uint()
            gridx = (ctypes.c_double * 500)()
            gridq = (ctypes.c_double * 500)()
            _lha.getgrid_(ctypes.byref(nxgrid), ctypes.byref(nqgrid), gridx, gridq)
            xs, q2s = gridx[:nxgrid.value], gridq[:nqgrid.value]
            qs = list(numpy.sqrt(numpy.array(q2s)))
            ## Remove x == 0 points: they screw up the ipol/xpol separation
            if xs[0] == 0.0:
                del xs[0]
        except Exception, e:
            ## Probably an LHpdf set if the gridx, gridq aren't working
            xmin = lhapdf.getXmin(1)
            q2min = lhapdf.getQ2min(1)
            q2max = lhapdf.getQ2max(1)
            # xs = list(numpy.logspace(math.log10(xmin), math.log10(0.05), 40)) + list(numpy.linspace(0.075, 0.2, 6)) + list(numpy.linspace(0.25, 1.0, 18))
            # xs = list(numpy.logspace(math.log10(xmin), math.log10(0.05), 40)) + list(numpy.logspace(math.log10(0.075), 0, 21))
            # xs = sorted(list(numpy.logspace(math.log10(xmin), 0, 70)) + [1.0 - i for i in numpy.logspace(math.log10(0.002), math.log10(0.1), 18)])
            xs = sorted(list(numpy.logspace(math.log10(xmin), 0, 70)) + list(numpy.linspace(0.1, 0.99, 50)))
            qs = list(numpy.sqrt(numpy.logspace(math.log10(q2min), math.log10(q2max), 50)))
            print "Manual x grid: ", ", ".join("%0.2e" % x for x in xs)
            print "Manual Q grid: ", ", ".join("%0.2e" % q for q in qs)

        ## Fill in extra sampling points if manually specified
        if opts.EXTRAXS:
            extraxs = [float(x) for x in opts.EXTRAXS.split(",")]
            xs = sorted(xs + extraxs)
        if opts.EXTRAQS:
            extraqs = [float(q) for q in opts.EXTRAQS.split(",")]
            qs = sorted(qs + extraqs)

        ## If there isn't an x = 1 point, create one
        # TODO: Remove this when LHAPDF ipol knows about x=1?
        # if xs[-1] != 1.0:
        #     xs.append(1.0)

        if alphas_qs is None:
            alphas_qs = qs

        ## Determine the active (non-zero) flavours in the grid (will be -5..5 or -6..6)
        # def active_flavours(xfxs):
        #     pids = [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6]
        #     xfxs_array = numpy.array(xfxs)
        #     pids = [pid for i, pid in enumerate(pids) if xfxs_array[:,i].any()]
        #     return pids
        ## NB. 0 is listed last since it will be translated to 21 in the PDG scheme
        lhapids = [-5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 0]

        ## Get the xf values for this PDF member
        xfs = []
        for x in xs:
            for q in qs:
                # if x != 1.0:
                #     xfs.append([lhapdf.xfx(x, q, pid) for pid in lhapids])
                # else:
                #     ## Force xf(x=1) = 0 for now, until ipol is improved
                #     # TODO: Remove this when LHAPDF ipol knows about x=1
                #     xfs.append([0.0 for pid in lhapids])
                xfs.append([lhapdf.xfx(x, q, pid) for pid in lhapids])

        ## Work out the member file path and open it for writing
        memname = setname + ('_%04d.lha' % member)
        mempath = os.path.join(setname, memname)
        f = open(mempath, "w")
        #f.write("PdfDesc: \n")
        f.write("PdfType: %s\n" % ("central" if member == 0 else "error"))
        f.write("Format: lhagrid1\n")
        f.write("---\n")
        ## Write x points
        line = " ".join("%2.6e" % x for x in xs)
        f.write(line + "\n")
        ## Write Q2 points
        line = " ".join("%2.6e" % q**2 for q in qs)
        f.write(line + "\n")
        ## Write internal flavour list
        f.write("-5 -4 -3 -2 -1 1 2 3 4 5 21" + "\n")
        ## Write block of xf values
        for xfs_xq in xfs:
            line = ""
            for xf in xfs_xq:
                if xf == 0.0: xf = 0.0 # remove occurences of negative zero
                line += "%2.6e " % xf
            f.write(line.strip() + "\n")

        f.write("---\n")
        f.close()


    ## Create the set-level metadata file
    metapath = os.path.join(setname, setname + '.info')
    f = open(metapath, "w")
    f.write("SetDesc: \n")
    f.write("Authors: \n")
    f.write("Reference: \n")
    f.write("Format: lhagrid1\n")
    #f.write("Status: prelim\n")
    f.write("DataVersion: -1\n")
    f.write("NumMembers: %d\n" % numMembers)
    f.write("Flavors: [-5,-4,-3,-2,-1,1,2,3,4,5,21]\n")
    f.write("OrderQCD: %d\n" % lhapdf.getOrderPDF())
    f.write("EvolutionNf: %d\n" % lhapdf.getNf())
    f.write("ErrorType: \n")
    f.write("XMin: %g\n" % lhapdf.getXmin(1))
    f.write("XMax: %g\n" % lhapdf.getXmax(1))
    f.write("Q2Min: %g\n" % lhapdf.getQ2min(1))
    f.write("Q2Max: %g\n" % lhapdf.getQ2max(1))
    f.write("Q2Max: %g\n" % lhapdf.getQ2max(1))
    f.write("MZ: %g\n" % MZ)
    f.write("MUp: %g\n" % lhapdf.getQMass(1, 1))
    f.write("MDown: %g\n" % lhapdf.getQMass(1, 2))
    f.write("MStrange: %g\n" % lhapdf.getQMass(1, 3))
    f.write("MCharm: %g\n" % lhapdf.getQMass(1, 4))
    f.write("MBottom: %g\n" % lhapdf.getQMass(1, 5))
    f.write("MTop: %g\n" % lhapdf.getQMass(1, 6))
    f.write("AlphaS_MZ: %g\n" % lhapdf.alphasPDF(MZ))
    f.write("AlphaS_OrderQCD: %d\n" % lhapdf.getOrderAlphaS(1))
    if qs is None:
        f.write("AlphaS_Type: ipol\n")
        f.write("AlphaS_Qs: [%s]\n" % ",".join(qs)
        f.write("AlphaS_Vals: [%s]\n" % ",".join(alphasPDF(1, q) for q in qs)
    else:
        f.write("AlphaS_Type: analytic\n")
        if lhapdf.getLam4(1) > 0:
            f.write("Lambda4: %g\n" % lhapdf.getLam4(1))
        if lhapdf.getLam5(1) > 0:
            f.write("Lambda5: %g\n" % lhapdf.getLam5(1))
    f.close()
