/**

@mainpage

@tableofcontents

@section intro Introduction

LHAPDF is a general purpose C++ interpolator, used for evaluating PDFs from
discretised data files.  Previous versions of LHAPDF were written in Fortran
77/90.

There are several reasons for this rewrite and the migration to C++, the
main ones being:

- Hugely reduced memory overhead
  - Although modern Fortran compilers can now dynamically allocate memory,
    LHAPDF was written with F77 and static memory allocation in mind. The
    memory overhead of LHAPDF5 is therefore proportional to the number of
    supported PDF sets, then multiplied again by the number of simultaneous
    PDF sets that can be used. The uninitialized static memory footprint is
    hence huge: at more than 2 GB it is incompatible with running LHAPDF on
    the Grid in "full memory" mode. This excludes use of standard LHAPDF
    builds for PDF reweighting and other tasks on the standard LHC computing
    resources. Dynamic memory allocation in LHAPDF6 entirely solves this problem,
    while removing all restrictions on the number of simultaneous PDF sets.

- Speed
  - Early tests show that LHAPDF6 can be substantially faster than LHAPDF5 in
    event generation, largely due to the ability to now evolve each PDF flavour
    independently.

- Encapsulation
  - The multi-set features of LHAPDF5 were added in retrospect, after the
    writing of PDF set wrapper codes which assumed only one PDF set would be
    used at one time. As a result, the parallel use of multiple sets returns
    correct PDF values, but does not work correctly for "metadata" such as
    alpha_s, nuber of flavours, etc. The new version stores such information
    in Info and AlphaS objects which are strictly bound to the PDF being
    accessed, so these problems of global state are no longer an issue.

- Generality
  - Previous versions of LHAPDF evolved slowly over time.  The original code
    was not written with certain added features in mind.  Taking the above
    case of multiple PDF loading as an example; the current Fortan version of
    LHAPDF has specific functionality to deal with this case.  The C++
    version that we propose deals with multiple PDF loading as standard,
    using the same functionality as for the single PDF case.  Other examples
    of this include dealing with special parton cases such as photons.
    Although this has little to do with language limitation; a rewrite with
    these general cases in mind, in any language, will allow for clearer
    code.  Along with this, current Fortran code has been modified
    extensively to deal with different PDF file formats, each with their own
    parameter space and interpolation rules.  One of the largest improvements
    implement in this C++ version is a unified PDF file format, with general
    parton flavour content (using the PDG MC particle ID scheme).
    This removes the need for special wrapper codes for each PDF, avoids the
    need for special functions to access e.g. photon PDFs, and means that
    new PDF sets can be made available without requiring a new LHAPDF release.

- Extensibility
  - Extensions to the current Fortan code are difficult considering how much it
    has evolved since its conception.  By exploiting object orientated
    practises, the C++ version will allow for the easy extension of several
    features.  An example of this is the Interpolator interface.  By
    implementing this; users can add to the current list of general
    interpolation methods that can be called on any PDF set, rather than dealing
    with specific interpolation rules being included in the individual authors'
    wrapper files.  The modular nature of the program means that any
    unforeseeable requirements in the future can, hopefully, be implemented
    easily.

These improvements have been implemented while retaining compatibility with the
Fortran LHAPDF versions, but the "native" C++ interface is much more powerful
and is highly recommended for new user code. We hope that this
version will be easier to extend and maintain in the future.  For Fortran LHADPF
documentaion as well as other information with regards to the project see
http://lhapdf.hepforge.org/.


@section install Installation

@subsection externals External dependencies

LHAPDF6 makes use of header files from the Boost C++ utility library
(http://www.boost.org). On Linux machines this should typically be available via
your system's packaging mechanism, e.g. the `libboost-all-dev` package on Ubuntu
and other Debian derivatives. On Scientific Linux 6 the system installation of
Boost is sufficient for LHAPDF 6.0.5 and later. The system copy on SL5 is too
old, however, but surely everyone has upgraded to v6 by now...

On Mac OS X the Homebrew system (http://brew.sh/) comes recommended by several
LHAPDF developers and contains a well-managed version of Boost. Many HEP
packages are already available for Homebrew via the homebrew-hep project:
http://davidchall.github.io/homebrew-hep/

Building Boost by hand is not particularly simple and should not be needed in
most cases: we recommend avoiding this! If you have access to the CERN AFS
filesystem, you can find builds of Boost for various platforms in the
`/afs/cern.ch/sw/lcg/external/Boost/` directory. If you really want or need to
do it manually, version 6.0.5 and later of LHAPDF only use Boost headers
(previous ones used compiled libraries) and rather than fully building Boost,
you can just use the header files direct from its source tarball: this is not
wonderfully neat, but is a lot easier than doing a full manual build and
installation of the Boost libraries.

The CMake system (i.e. `cmake` command) must also be installed, in order to
build an internal copy of the yaml-cpp parser library
(http://code.google.com/p/yaml-cpp/) used to read the PDF metadata which is in
YAML format (http://www.yaml.org).

@note Until version 6.0.5, LHAPDF required yaml-cpp to be installed externally,
 either manually or by package manager. With version 6.0.5 and later, there is
 no such dependence, but the `cmake` command must be available at build time.


@subsection lhapdf Building LHAPDF

If you have downloaded a release tarball, unpack it with `tar xf
LHAPDF-xxx.tar.gz`, then `cd` to the newly-created directory.

@note If checking out from version control rather than unpacking a tarball,
again `cd` to the new directory, but you must then also run `autoreconf -i`
before proceeding to the instructions below. There will also be more
requirements for external packages if you build this way, since this is the
"developer" route to building LHAPDF and requires a bit more expertise (believe
it or not we are trying to make life simpler for normal users ;-) )

Now you should run the `configure` script to analyse your machine, compiler,
etc. and set up the Makefiles. You will probably need to provide the `--prefix`
argument to `configure` to tell it where you want to install LHAPDF (probably
you don't want to install to `/usr/local`, which is the default) and perhaps use
the `--with-boost` flag to indicate the locations of your
Boost installation.

@note These flags expect the "base" location of the package, e.g. if you have
installed library X such that there are headers in `/foo/include/` (or
`/foo/include/X`) and a compiled library (or libraries) in `/foo/lib/` then you
would use `--with-X=/foo`.

If you want to build the Python interface to LHAPDF (which is very nice!), you
will need the Python development headers to be installed (e.g. via the
`python-dev` Ubuntu package). If the `Python.h` header is not found by
`configure`, no Python extension module will be built.

In conclusion, an example call to LHAPDF's `configure` script might look like:

    ./configure --prefix=$HOME/local

(This should be appropriate if you have installed Boost in `/usr` via your
machine's packaging system.) An example build script for LHAPDF6 on the CERN
lxplus6 system is shown at the end of these instructions.

If you want to use an alternative C++ compiler, then you can specify the CXX
variable on the command line. This is essential on OS X Mavericks and later,
where the consistent compiler suite is clang rather than gcc -- in that
situation, use:

    ./configure --prefix=... CC=clang CXX=clang++

The configure script will run and produce quite a bit of output from its various
tests. Hopefully everything will be successful: if it gets to the end without
stopping due to an error then all is well.

Then just call `make` to build the library (or e.g. `make -j4` to compile 4
files in parallel -- if your machine has enough processor cores to do so, even
`-j2` will speed up the build quite a bit). To install LHAPDF to the `--prefix`
location that you specified, call `make install`. You will (or at least
*should(!) find installed files in `$prefix/lib`, `$prefix/include/LHAPDF`, and
`$prefix/share/LHAPDF`.


@subsection lxplus Building on lxplus

CERN's lxplus shared system is always an awkward environment to build packages,
since the system compiler etc. are not part of the LCG supported list of
architectures. Here is an example of how to build LHAPDF and its dependencies
there -- although you can of course use other compilers, Python versions, build
flags, etc. as you wish!

    ## Set up build tools
    source /afs/cern.ch/sw/lcg/contrib/gcc/4.6/x86_64-slc6-gcc46-opt/setup.sh
    export PATH=/afs/cern.ch/sw/lcg/external/CMake/2.8.9/Linux-i386/bin/:$PATH

    ## Create install dir and pre-empt appropriate path setting
    mkdir local
    export PATH=$PWD/local/bin:$PATH
    export LD_LIBRARY_PATH=$PWD/local/lib:$LD_LIBRARY_PATH
    export PYTHONPATH=$PWD/local/lib64/python2.6/site-packages:$PYTHONPATH

    ## Build LHAPDF
    LHANAME=LHAPDF-6.X.Y
    wget http://www.hepforge.org/archive/lhapdf/$LHANAME.tar.gz -O- | tar xz
    cd $LHANAME
    ./configure --prefix=$PWD/../local \
        --with-boost=/afs/cern.ch/sw/lcg/external/Boost/1.50.0_python2.6/x86_64-slc6-gcc46-opt
    make -j2 && make install
    cd ..


@section sets Official PDF sets

The following PDF sets are available and officially supported:

- @ref pdfsets


@section usage Usage

As for previous versions, LHAPDF6 is a programmatic library. It can be accessed
via user code written in C++, and to a more limited extent from Python and
Fortran programs.

PDF sets (each of which is stored in a unique filesystem directory) should
usually be installed in the `$prefix/share/LHAPDF/` directory (i.e. the PDF dirs
are at the same level as the global `lhapdf.conf` file). To make use of PDF sets
installed in other places, those search paths should be listed in the
`LHAPDF_DATA_PATH` environment variable. [`LHAPDF_DATA_PATH` is an extension of
the old `LHAPATH` variable which supports multiple search paths separated by
colon (`:`) characters, cf. standard system paths like `PATH`,
`LD_LIBRARY_PATH`, etc.]

Here are some reference documents on the library design and the system of
PDF/set/config metadata flags:

- Design rationale: @ref design
- PDF metadata flags: @ref config


@section codeexamples Code examples

The following examples should help you to get to grips with using LHAPDF from C++:

@subsection ex1 Using and testing PDFs in C++
@include examples/testpdf.cc

@include tests/testperf.cc

@subsection ex2 Using and testing PDFs in Python
@include examples/pythonexample.py

@subsection ex3 Handling LHAPDF v5/v6 compatibility in C++
@include examples/compatibility.cc

@subsection ex4 Using and testing PDF grids in C++
@include tests/testgrid.cc

@subsection ex5 Testing the Info system in C++
@include tests/testinfo.cc

@subsection ex6 Testing the LHAPDF ID indexing system in C++
@include tests/testindex.cc

@subsection ex7 Testing the path searching system in C++
@include tests/testpaths.cc

@subsection ex8 Testing the AlphaS classes in C++
@include tests/testalphas.cc

@subsection ex9 Making a new PDF subclass in C++
@include examples/analytic.cc


@section authors Authors

@include AUTHORS


@section dev For developers

See the following pages:

- @ref todolist
- @ref todo
- @ref codingstyle

@todo Add some developer build guides, including the autotools, Cython, etc. gotchas.

@example ../examples/testpdf.cc
@example ../examples/pythonexample.py
@example ../examples/compatibility.cc
@example ../tests/testgrid.cc
@example ../tests/testinfo.cc
@example ../tests/testindex.cc
@example ../tests/testpaths.cc
@example ../tests/testalphas.cc
@example ../examples/analytic.cc

*/
