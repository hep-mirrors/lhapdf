/**

@mainpage

@tableofcontents

@section intro Introduction

LHAPDF is a general purpose C++ interpolator, used for evaluating PDFs from
discretised data files.  Previous versions of LHAPDF were written in Fortran
77/90.

There are several reasons for this rewrite and the migration to C++, the
main ones being:

- Hugely reduced memory overhead
  - Although modern Fortran compilers can now dynamically allocate memory,
    LHAPDF was written with F77 and static memory allocation in mind. The
    memory overhead of LHAPDF5 is therefore proportional to the number of
    supported PDF sets, then multiplied again by the number of simultaneous
    PDF sets that can be used. The uninitialized static memory footprint is
    hence huge: at more than 2 GB it is incompatible with running LHAPDF on
    the Grid in "full memory" mode. This excludes use of standard LHAPDF
    builds for PDF reweighting and other tasks on the standard LHC computing
    resources. Dynamic memory allocation in LHAPDF6 entirely solves this problem,
    while removing all restrictions on the number of simultaneous PDF sets.

- Speed
  - Early tests show that LHAPDF6 can be substantially faster than LHAPDF5 in
    event generation, largely due to the ability to now evolve each PDF flavour
    independently.

- Encapsulation
  - The multi-set features of LHAPDF5 were added in retrospect, after the
    writing of PDF set wrapper codes which assumed only one PDF set would be
    used at one time. As a result, the parallel use of multiple sets returns
    correct PDF values, but does not work correctly for "metadata" such as
    alpha_s, nuber of flavours, etc. The new version stores such information
    in Info and AlphaS objects which are strictly bound to the PDF being
    accessed, so these problems of global state are no longer an issue.

- Generality
  - Previous versions of LHAPDF evolved slowly over time.  The original code
    was not written with certain added features in mind.  Taking the above
    case of multiple PDF loading as an example; the current Fortan version of
    LHAPDF has specific functionality to deal with this case.  The C++
    version that we propose deals with multiple PDF loading as standard,
    using the same functionality as for the single PDF case.  Other examples
    of this include dealing with special parton cases such as photons.
    Although this has little to do with language limitation; a rewrite with
    these general cases in mind, in any language, will allow for clearer
    code.  Along with this, current Fortran code has been modified
    extensively to deal with different PDF file formats, each with their own
    parameter space and interpolation rules.  One of the largest improvements
    implement in this C++ version is a unified PDF file format, with general
    parton flavour content (using the PDG MC particle ID scheme).
    This removes the need for special wrapper codes for each PDF, avoids the
    need for special functions to access e.g. photon PDFs, and means that
    new PDF sets can be made available without requiring a new LHAPDF release.

- Extensibility
  - Extensions to the current Fortan code are difficult considering how much it
    has evolved since its conception.  By exploiting object orientated
    practises, the C++ version will allow for the easy extension of several
    features.  An example of this is the Interpolator interface.  By
    implementing this; users can add to the current list of general
    interpolation methods that can be called on any PDF set, rather than dealing
    with specific interpolation rules being included in the individual authors'
    wrapper files.  The modular nature of the program means that any
    unforeseeable requirements in the future can, hopefully, be implemented
    easily.

These improvements have been implemented while retaining compatibility with the
Fortran LHAPDF versions, but the "native" C++ interface is much more powerful
and is highly recommended for new user code. We hope that this
version will be easier to extend and maintain in the future.  For Fortran LHADPF
documentaion as well as other information with regards to the project see
http://lhapdf.hepforge.org/.


@section installsec Installation

Full installation instructions are given on the installation page:

- @ref install


@section sets Official PDF sets

The following link takes you to the PDF sets which are currently available and officially supported:

- @ref pdfsets


@section usage Usage

As for previous versions, LHAPDF6 is a programmatic library. It can be accessed
via user code written in C++, and to a more limited extent from Python and
Fortran programs.

PDF sets (each of which is stored in a unique filesystem directory) should
usually be installed in the `$prefix/share/LHAPDF/` directory (i.e. the PDF dirs
are at the same level as the global `lhapdf.conf` file). To make use of PDF sets
installed in other places, those search paths should be listed in the
`LHAPDF_DATA_PATH` environment variable. [`LHAPDF_DATA_PATH` is an extension of
the old `LHAPATH` variable which supports multiple search paths separated by
colon (`:`) characters, cf. standard system paths like `PATH`,
`LD_LIBRARY_PATH`, etc.]

Here are some reference documents on the library design and the system of
PDF/set/config metadata flags:

- Design rationale: @ref design
- PDF metadata flags: @ref config


@section codeexamples Code examples

The following examples should help you to get to grips with using LHAPDF from C++:

@subsection ex1 Using and testing PDFs in C++
@include examples/testpdf.cc

@include tests/testperf.cc

@subsection ex2 Using and testing PDFs in Python
@include examples/pythonexample.py

@subsection ex3 Handling LHAPDF v5/v6 compatibility in C++
@include examples/compatibility.cc

@subsection ex4 Using and testing PDF grids in C++
@include tests/testgrid.cc

@subsection ex5 Testing the Info system in C++
@include tests/testinfo.cc

@subsection ex6 Testing the LHAPDF ID indexing system in C++
@include tests/testindex.cc

@subsection ex7 Testing the path searching system in C++
@include tests/testpaths.cc

@subsection ex8 Testing the AlphaS classes in C++
@include tests/testalphas.cc

@subsection ex9 Making a new PDF subclass in C++
@include examples/analytic.cc


@section authors Authors

@include AUTHORS


@section dev For developers

See the following pages:

- @ref todolist
- @ref todo
- @ref codingstyle


@todo Add some developer build guides, including the autotools, Cython, etc. gotchas.


@example ../examples/testpdf.cc
@example ../examples/pythonexample.py
@example ../examples/compatibility.cc
@example ../tests/testgrid.cc
@example ../tests/testinfo.cc
@example ../tests/testindex.cc
@example ../tests/testpaths.cc
@example ../tests/testalphas.cc
@example ../examples/analytic.cc

*/
