/**

@mainpage
@tableofcontents


Introduction
============

LHAPDF is a general purpose C++ interpolator, used for evaluating PDFs from
discretised data files.  Previous versions of LHAPDF were written in Fortran
77/90.  There are several reasons for migrating to C++, the main ones being:

- Dynamic memory allocation
  - Although modern Fortran compilers can now deal with this, older versions
    of LHAPDF were written with static memory allocation in mind.  These
    versions were then extended to allow for the initialisation of several
    PDF data files at once.  As we look towards the parallelisation of such
    tasks; the static memory cost of loading several large PDF files becomes
    noticeable.  Being able to dynamically allocate memory means that we do
    not need to use large amounts for cases where we only need a small number
    of PDFs loaded at a time.

- Generality
  - Previous versions of LHAPDF evolved slowly over time.  The original code
    was not written with certain added features in mind.  Taking the above
    case of multiple PDF loading as an example; the current Fortan version of
    LHAPDF has specific functionality to deal with this case.  The C++
    version that we propose deals with multiple PDF loading as standard,
    using the same functionality as for the single PDF case.  Other examples
    of this include dealing with special parton cases such as photons.
    Although this has little to do with language limitation; a rewrite with
    these general cases in mind, in any language, will allow for clearer
    code.  Along with this, current Fortran code has been modified
    extensively to deal with different PDF file formats, each with their own
    parameter space and interpolation rules.  One of the largest improvements
    we seek to implement in this C++ version is a unified PDF file format.
    This will remove the need for specific case interpolation rules being
    included in several PDF author wrappers.

- Extensibility
  - Extensions to the current Fortan code are difficult considering how much it
    has evolved since its conception.  By exploiting object orientated
    practises, the C++ version will allow for the easy extension of several
    features.  An example of this is the Interpolator interface.  By
    implementing this; users can add to the current list of general
    interpolation methods that can be called on any PDF set, rather than dealing
    with specific interpolation rules being included in the individual authors'
    wrapper files.  The modular nature of the program means that any
    unforeseeable requirements in the future can, hopefully, be implemented
    easily.

We hope to implement these improvements whilst retaining the functionality of
current Fortran LHAPDF versions.  By doing so, we hope that this version will be
easier to extend and maintain in the future.  For Fortran LHADPF documentaion as
well as other information with regards to the project see
http://lhapdf.hepforge.org/.


Installation
------------

If you have downloaded a release tarball, unpack it with `tar xf
LHAPDF-xxx.tar.gz`, then `cd` to the newly-created directory.

@note If checking out from version control rather than unpacking a tarball,
again `cd` to the new directory, but you must then also run `autoreconf -i`
before proceeding to the instructions below. This extra step is because the
tarballs contain pre-made build scripts, while if you check out from version
control then you are effectively a developer and must make these scripts
yourself. You must have automake, autoconf, and libtool installed to build
LHAPDF from an SVN checkout.

Now you should run the `configure` script to analyse your machine, compiler,
etc. and set up the Makefiles. You will probably need to provide some arguments
to `configure` to tell it where you want to install LHAPDF (probably you don't
want to install to `/usr/local`, which is the default) and perhaps where to find
the `Boost` (http://www.boost.org) and `yaml-cpp`
(http://code.google.com/p/yaml-cpp/) libraries that LHAPDF6 requires.

@note For now you must use `yaml-cpp` version 0.3.x, *not* the new API in
version 0.5 and higher.

@note Also make sure that your build of `yaml-cpp` has installed a *shared*
library (with a file extension of `.so` on Linux, or `.dylib` on Mac,
e.g. `libyaml-cpp.so`) as well as the default `libyaml-cpp.a` static library.
To make sure that the shared library is built, call `cmake -DBUILD_SHARED_LIBS=ON -DCMAKE_INSTALL_PREFIX=/my/install/area`
during the build before running `make` and `make install`.

An example call to configure might look like:

    ./configure --prefix=$HOME/local --with-yaml-cpp=$HOME/local

(this should be appropriate if you have installed Boost in `/usr` via your
machine's packaging system, and have privately installed yaml-cpp 0.3 into
`~/local` via the `-DCMAKE_INSTALL_PATH=...` described above.)

If you want to use an alternative C++ compiler, then you can specify the CXX
variable on the command line, e.g.

    ./configure --prefix=... CXX=clang++

The configure script will run and produce quite a bit of output from its various
tests. Hopefully everything will be successful: if it gets to the end without
stopping due to an error then all is well.

Then just call `make` to build the library (or e.g. `make -j4` to compile 4
files in parallel -- if your machine has enough processor cores to do so, even
-j2 will speed up the build quite a bit). To install LHAPDF to the `--prefix`
location that you specified, call `make install`. You will (or at least
*should(!) find installed files in `$prefix/lib`, `$prefix/include/LHAPDF`, and
`$prefix/share/LHAPDF`.


Usage
-----

As for previous versions, LHAPDF is a programmatic library. It can be accessed
via user code written in C++, and to a more limited extent from Python and
Fortran programs.

PDF sets (each of which is stored in a unique filesystem directory) should
usually be installed in the `$prefix/share/LHAPDF/` directory (i.e. the PDF dirs
are at the same level as the global `lhapdf.conf` file). To make use of PDF sets
installed in other places, those search paths should be listed in the
`LHAPDF_DATA_PATH` environment variable. [`LHAPDF_DATA_PATH` is an extension of
the old `LHAPATH` variable which supports multiple search paths separated by
colon (`:`) characters, cf. standard system paths like `PATH`,
`LD_LIBRARY_PATH`, etc.]

The following examples should help you to get to grips with using LHAPDF from C++:

**Using and testing PDFs in C++:**
@include migration/testpdf.cc

**Using and testing PDFs in Python:**
@include examples/pythonexample.py

**Handling LHAPDF v5/v6 compatibility in C++:**
@include examples/compatibility.cc

**Using and testing PDF grids in C++:**
@include tests/testgrid.cc

**Testing the Info system in C++:**
@include tests/testinfo.cc

**Testing the LHAPDF ID indexing system in C++:**
@include tests/testindex.cc

**Testing the path searching system in C++:**
@include tests/testpaths.cc

**Testing the AlphaS classes in C++:**
@include tests/testalphas.cc

**Making a new PDF subclass in C++:**
@include examples/analytic.cc


For developers
--------------

See the following pages:

- @ref todolist
- @ref todo
- @ref design
- @ref config
- @ref codingstyle

@example ../migration/testpdf.cc
@example ../examples/pythonexample.py
@example ../examples/compatibility.cc
@example ../tests/testgrid.cc
@example ../tests/testinfo.cc
@example ../tests/testindex.cc
@example ../tests/testpaths.cc
@example ../tests/testalphas.cc
@example ../examples/analytic.cc

*/
